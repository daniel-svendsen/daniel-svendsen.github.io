{"version":3,"mappings":"+CAGA,MAAMA,EAAmB,CACrB,UAAkE,0DAAAC,EAAA,4QAAAA,EAAA,wFAAAA,EAAA,wFAAAA,EAAA,8bAAAA,EAAA,wFAAAA,EAAA,wFAAAA,EAAA,uQAAAA,EAAA,sFAAAA,EAAA,sFAAAA,EAAA,kIAClE,SAAgE,yDAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,sFAAAA,EAAA,sFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,uFAAAA,EAAA,sFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,mFAAAA,EAAA,4CAChE,aAAwE,qDAAAA,EAAA,2EAAAA,EAAA,uCACxE,SAAgE,wDAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,4KAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,qFAAAA,EAAA,oFAAAA,EAAA,oFAAAA,EAAA,qFAAAA,EAAA,2KAAAA,EAAA,mFAAAA,EAAA,mFAAAA,EAAA,mFAAAA,EAAA,mFAAAA,EAAA,mFAAAA,EAAA,sKAAAA,EAAA,2CAChE,YAAa,wDAAAA,EAAA,0JAAAA,EAAA,qKAAAA,EAAA,iFAAAA,EAAA,mFAAAA,EAAA,uFAAAA,EAAA,0FAAAA,EAAA,0FAAAA,EAAA,0FAAAA,EAAA,yFAAAA,EAAA,0QAAAA,EAAA,6HACjB,EAEO,SAASC,EAAkBC,EAAmB,CACjD,KAAM,CAACC,EAAQC,CAAS,EAAIC,WAAmC,EAAE,EAEjEC,mBAAU,IAAM,EACO,SAAY,CAC3B,MAAMC,EAAsC,CAAC,EAE7C,UAAWC,KAAUN,EACb,GAAAH,EAAiBS,CAAM,EAAG,CACpB,MAAAC,EAAUV,EAAiBS,CAAM,EACjCE,EAAQ,OAAO,KAAKD,CAAO,EACvBF,EAAAC,CAAM,EAAI,MAAM,QAAQ,IAC9BE,EAAM,IAAI,MAAOC,IACD,MAAMF,EAAQE,CAAI,EAAE,GACrB,OACd,CACL,OAEQ,aAAK,WAAWH,CAAM,sBAAsB,EAI5DJ,EAAUG,CAAS,CACvB,GAEW,GACZ,CAACL,CAAO,CAAC,EAELC,CACX,CCtCA,SAASS,EAAgBC,EAAiB,CAClC,MAAAC,EAAMD,EAAM,MAAM,EACxB,QAASE,EAAID,EAAI,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACvC,MAAMC,EAAI,KAAK,MAAM,KAAK,UAAYD,EAAI,EAAE,EAC3C,CAACD,EAAIC,CAAC,EAAGD,EAAIE,CAAC,CAAC,EAAI,CAACF,EAAIE,CAAC,EAAGF,EAAIC,CAAC,CAAC,EAE9B,OAAAD,CACT,CAEO,SAASG,EAAkBd,EAA4B,CAC5D,KAAM,CAACe,EAAUC,CAAW,EAAId,WAAmB,EAAE,EAC/Ce,EAAiBC,SAAO,EAAK,EAEnCf,mBAAU,IAAM,CACV,CAACc,EAAe,UAAWjB,GAAA,YAAAA,EAAQ,QAAS,IAClCgB,EAAAP,EAAaT,CAAM,CAAC,EAChCiB,EAAe,QAAU,GAC3B,EACC,CAACjB,CAAM,CAAC,EAEJe,CACT","names":["availableFolders","__vitePreload","useImportedImages","folders","images","setImages","useState","useEffect","newImages","folder","modules","paths","path","shuffleArray","array","arr","i","j","useShuffledImages","shuffled","setShuffled","hasInitialized","useRef"],"ignoreList":[],"sources":["../../src/hooks/useImportedImages.ts","../../src/hooks/useShuffleImages.ts"],"sourcesContent":["import {useEffect, useState} from 'react';\r\n\r\n// FÃ¶rdefinierade mappar och deras imports\r\nconst availableFolders = {\r\n    portraits: import.meta.glob('../assets/portraits/*.{jpg,jpeg,png}'),\r\n    weddings: import.meta.glob('../assets/weddings/*.{jpg,jpeg,png}'),\r\n    companyhobby: import.meta.glob('../assets/companyhobby/*.{jpg,jpeg,png}'),\r\n    carousel: import.meta.glob('../assets/carousel/*.{jpg,jpeg,png}'),\r\n    herosection: import.meta.glob('../assets/herosection/*.{jpg,jpeg,png}'),\r\n};\r\n\r\nexport function useImportedImages(folders: string[]) {\r\n    const [images, setImages] = useState<Record<string, string[]>>({});\r\n\r\n    useEffect(() => {\r\n        const loadImages = async () => {\r\n            const newImages: Record<string, string[]> = {};\r\n\r\n            for (const folder of folders) {\r\n                if (availableFolders[folder]) {\r\n                    const modules = availableFolders[folder];\r\n                    const paths = Object.keys(modules);\r\n                    newImages[folder] = await Promise.all(\r\n                        paths.map(async (path) => {\r\n                            const mod = await modules[path]() as { default: string };\r\n                            return mod.default;\r\n                        })\r\n                    );\r\n                } else {\r\n                    console.warn(`Folder '${folder}' is not recognized.`);\r\n                }\r\n            }\r\n\r\n            setImages(newImages);\r\n        };\r\n\r\n        loadImages();\r\n    }, [folders]);\r\n\r\n    return images;\r\n}\r\n","import { useEffect, useRef, useState } from 'react'\n\nfunction shuffleArray<T>(array: T[]): T[] {\n  const arr = array.slice()\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[arr[i], arr[j]] = [arr[j], arr[i]]\n  }\n  return arr\n}\n\nexport function useShuffledImages(images: string[]): string[] {\n  const [shuffled, setShuffled] = useState<string[]>([])\n  const hasInitialized = useRef(false)\n\n  useEffect(() => {\n    if (!hasInitialized.current && images?.length > 0) {\n      setShuffled(shuffleArray(images))\n      hasInitialized.current = true\n    }\n  }, [images])\n\n  return shuffled\n}"],"file":"assets/useShuffleImages-BtwWRUGi.js"}